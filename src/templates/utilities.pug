-
  function getRandomInt(min /*: number */, max /*: number */) /*: number */ {
    const randomInt = Math.floor(Math.random() * (max - min)) + min;

    return randomInt;
  }

  function getRandomId(
    options /*: {
      length?: number;
      uppercase?: boolean;
      lowercase?: boolean;
      numbers?: boolean;
      symbols?: boolean;
    } */ = {}
  ) /*: string */ {
    const defaultOptions = {
      length: 20,
      uppercase: false,
      lowercase: true,
      numbers: true,
      symbols: false,
    };

    const currentOptions = Object.assign({}, defaultOptions, options);

    const defaultChars = {
      uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      lowercase: 'abcdefghijklmnopqrstuvwxyz',
      numbers: '0123456789',
      symbols: '!@#$%^&*',
    };

    /*
    type defaultCharsKey = keyof typeof defaultChars;
    */

    const currentChars = Object.keys(defaultChars).reduce(
      (acc, key) =>
        acc +
        (currentOptions[key /* as defaultCharsKey */]
          ? defaultChars[key /* as defaultCharsKey */]
          : ''),
      ''
    );

    const randomId = Array.from(
      { length: currentOptions.length },
      () => currentChars[getRandomInt(0, currentChars.length - 1)]
    ).join('');

    return randomId;
  }

  function getRandomDoubleId(length = 20) /*: string */ {
    function* generator(characters /*: number */) /*: Generator<string, void, void> */ {
      while (true) {
        const randomId = getRandomId({ length: characters });

        yield randomId;
        yield randomId;
      }
    }

    /*
    type RandomDoubleIdWithGenerator = typeof getRandomDoubleId & {
      generator: Generator<string, void, void>;
    };
    */

    if (
      getRandomDoubleId /* as RandomDoubleIdWithGenerator */.generator === void 0
    ) {
      getRandomDoubleId /* as RandomDoubleIdWithGenerator */.generator = generator(
        length
      );
    }

    return (
      getRandomDoubleId /* as RandomDoubleIdWithGenerator */.generator
        .next().value || ''
    );
  }
